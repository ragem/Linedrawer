{"version":3,"sources":["serviceWorker.js","Components/LineDrawer/index.js","Components/LineDrawer/LineDrawer.component.js","index.js"],"names":["Boolean","window","location","hostname","match","LineDrawer","x1","React","createRef","y1","x2","y2","canvas","DrawCanvas","state","checked","this","drawLines","current","getBoundingClientRect","width","parseInt","value","height","drawLine","ctx","getContext","strokeStyle","beginPath","moveTo","lineTo","stroke","color","fill","xn","yn","dx","Math","abs","dy","xi","yi","fillStyle","fillRect","clearRect","pn","e","mouseDown","startX","startY","lastX2","lastY2","clientX","left","clientY","top","setState","ref","className","onMouseDown","startUserLineDraw","onMouseUp","stopUserLineDraw","onMouseMove","drawUserMovingLine","renderFromCenter","htmlFor","id","type","onClick","getInputFromFields","clearCanvas","defaultChecked","onChange","toggleCheckedState","disabled","renderCanvas","PureComponent","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94fe07d3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import LineDrawer from './LineDrawer.component';\n\nexport default LineDrawer;\n","import React, { PureComponent } from 'react';\nimport './LineDrawer.style.scss';\n\nclass LineDrawer extends PureComponent {\n    constructor() {\n        super();\n        this.x1 = React.createRef();\n        this.y1 = React.createRef();\n        this.x2 = React.createRef();\n        this.y2 = React.createRef();\n        this.canvas = React.createRef();\n        this.DrawCanvas = React.createRef();\n\n        this.state = {\n            checked: true\n        };\n    }\n\n    componentDidMount() {\n        this.drawLines();\n    }\n\n    getInputFromFields() {\n        const canvas = this.canvas.current.getBoundingClientRect();\n        const { checked } = this.state;\n        const x1 = checked ? canvas.width / 2 : parseInt(this.x1.current.value, 10);\n        const y1 = checked ? canvas.height / 2 : parseInt(this.y1.current.value, 10);\n        const x2 = parseInt(this.x2.current.value, 10);\n        const y2 = parseInt(this.y2.current.value, 10);\n        this.drawLine(x1, y1, x2, y2);\n    }\n\n    drawLines() {\n        const canvas = this.canvas.current.getBoundingClientRect();\n        const ctx = this.canvas.current.getContext('2d');\n\n        ctx.strokeStyle = '#000';\n        ctx.beginPath();\n        ctx.moveTo(0, canvas.height);\n        ctx.lineTo(canvas.width, 0);\n        ctx.stroke();\n        ctx.moveTo(canvas.width, canvas.height);\n        ctx.lineTo(0, 0);\n        ctx.stroke();\n    }\n\n    drawLine(x1, y1, x2, y2, color = '#000', ctx = this.canvas.current.getContext('2d'), fill = true) {\n        let xn = x1;\n        let yn = y1;\n        const dx = Math.abs(x2 - x1);\n        const dy = Math.abs(y2 - y1);\n        const xi = (x1 < x2) ? 1 : -1;\n        const yi = (y1 < y2) ? 1 : -1;\n        ctx.fillStyle = color;\n        if (fill) ctx.fillRect(x1, y1, 1, 1);\n        else ctx.clearRect(x1, y1, 1, 1);\n        if (dx >= dy) {\n            let pn = 2 * dy - dx;\n            while (xn !== x2) {\n                xn += xi;\n                if (pn > 0) {\n                    yn += yi;\n                    pn += 2 * (dy - dx);\n                } else {\n                    pn += 2 * dy;\n                }\n                if (fill) ctx.fillRect(xn, yn, 1, 1);\n                else ctx.clearRect(xn, yn, 1, 1);\n            }\n        } else {\n            let pn = 2 * dx - dy;\n            while (yn !== y2) {\n                yn += yi;\n                if (pn < 0) {\n                    pn += 2 * dx;\n                } else {\n                    xn += xi;\n                    pn += 2 * (dx - dy);\n                }\n                if (fill) ctx.fillRect(xn, yn, 1, 1);\n                else ctx.clearRect(xn, yn, 1, 1);\n            }\n        }\n    }\n\n    drawUserMovingLine(e) {\n        const {\n            mouseDown, startX, startY, lastX2, lastY2\n        } = this.state;\n        const canvas = this.canvas.current.getBoundingClientRect();\n        const ctx = this.DrawCanvas.current.getContext('2d');\n        const x2 = e.clientX - canvas.left;\n        const y2 = e.clientY - canvas.top;\n        if (mouseDown) {\n            this.drawLine(startX, startY, lastX2, lastY2, '#fff', ctx, false);\n            this.drawLine(startX, startY, x2, y2, '#000', ctx);\n        }\n        this.setState({ lastX2: x2, lastY2: y2 });\n    }\n\n    clearCanvas() {\n        const canvas = this.canvas.current.getBoundingClientRect();\n        const ctx = this.canvas.current.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawLines();\n    }\n\n    startUserLineDraw(e) {\n        const canvas = this.canvas.current.getBoundingClientRect();\n        this.setState({ mouseDown: true, startX: e.clientX - canvas.left, startY: e.clientY - canvas.top });\n    }\n\n    stopUserLineDraw() {\n        const {\n            startX, startY, lastX2, lastY2\n        } = this.state;\n        this.setState({ mouseDown: false });\n        const canvas = this.DrawCanvas.current.getBoundingClientRect();\n        const ctx = this.DrawCanvas.current.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawLine(startX, startY, lastX2, lastY2);\n    }\n\n    toggleCheckedState() {\n        const { checked } = this.state;\n        this.setState({ checked: !checked });\n    }\n\n    renderCanvas() {\n        return (\n            <>\n                <canvas\n                  ref={ this.canvas }\n                  className=\"Canvas\"\n                  width={ 500 }\n                  height={ 500 }\n                />\n                <canvas\n                  ref={ this.DrawCanvas }\n                  className=\"Draw-canvas\"\n                  width={ 500 }\n                  height={ 500 }\n                  onMouseDown={ (e) => this.startUserLineDraw(e) }\n                  onMouseUp={ () => this.stopUserLineDraw() }\n                  onMouseMove={ (e) => this.drawUserMovingLine(e) }\n                />\n                <div\n                  className=\"wrapper\"\n                >\n                    { this.renderFromCenter() }\n                    <label htmlFor=\"x1\" className=\"coord-input\">\n                        X2\n                        <input\n                          id=\"x1\"\n                          type=\"number\"\n                          className=\"radiusbox\"\n                          ref={ this.x2 }\n                        />\n                    </label>\n                    <label htmlFor=\"y2\" className=\"coord-input\">\n                        Y2\n                        <input\n                          id=\"y2\"\n                          type=\"number\"\n                          className=\"radiusbox\"\n                          ref={ this.y2 }\n                        />\n                    </label>\n                    <button\n                      className=\"drawbtn\"\n                      onClick={ () => this.getInputFromFields() }\n                    >\n                        Draw\n                    </button>\n                    <button\n                      className=\"drawbtn\"\n                      onClick={ () => this.clearCanvas() }\n                    >\n                        Clear canvas\n                    </button>\n                </div>\n            </>\n        );\n    }\n\n    renderFromCenter() {\n        const { checked } = this.state;\n        return (\n            <>\n                <label className=\"coord-input\" htmlFor=\"centerCheckbox\">\n                    X1 and Y1 are center\n                    <input\n                      id=\"centerCheckbox\"\n                      type=\"checkbox\"\n                      defaultChecked={ checked }\n                      onChange={ () => this.toggleCheckedState() }\n                    />\n                </label>\n                <label\n                  htmlFor=\"x1\"\n                  className=\"coord-input\"\n                >\n                    X1\n                    <input\n                      id=\"x1\"\n                      type=\"number\"\n                      className=\"radiusbox\"\n                      ref={ this.x1 }\n                      disabled={ checked }\n                    />\n                </label>\n                <label\n                  htmlFor=\"y1\"\n                  className=\"coord-input\"\n                >\n                    Y1\n                    <input\n                      id=\"y1\"\n                      type=\"number\"\n                      className=\"radiusbox\"\n                      ref={ this.y1 }\n                      disabled={ checked }\n                    />\n                </label>\n            </>\n        );\n    }\n\n\n    render() {\n        return (\n            this.renderCanvas()\n        );\n    }\n}\n\nexport default LineDrawer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport LineDrawer from './Components/LineDrawer';\n\nReactDOM.render(<LineDrawer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}